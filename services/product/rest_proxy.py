import importlib
import inspect
#from product_server import ProductInfoServer
import google.api.annotations_pb2 as annotations_pb2
from google.api.http_pb2 import HttpRule
from google.protobuf import symbol_database
from grpc import aio as grpc_aio
from aiohttp import web
from functools import partial
from google.protobuf import json_format
from method_info import MethodInfo
import multiprocessing



def get_type(type_name):
    db = symbol_database.Default()
    type_name = type_name.split('/')[-1]
    try:
        message_descriptor = db.pool.FindMessageTypeByName(type_name)
        message_class = db.GetPrototype(message_descriptor)
        return message_class
    except KeyError:
        return None


class MyProxy(object):
    def __init__(self, servicer_cls):
        """
            servicer_cls: is the class that implements the ServicerInterface
            for e.g. ProductInfoServer derives from ProductInfoServicer
        """
        self._servicer_cls = servicer_cls

    def _get_service_name(self):
        """
            extracts the service name from the servicer class.
        """

        # Find the servicer class name.
        root_base_class = next(
            (cls for cls in reversed(inspect.getmro(self._servicer_cls)) if cls is not object), None
        )
        servicer_name = root_base_class.__name__

        # servicer class name is generated by adding Servicer to the SericeName
        service_name = servicer_name[: -len('Servicer')]
        return service_name

    def _get_stub_name(self):
        service_name = self._get_service_name()
        return f'{service_name}Stub'

    def _get_grpc_module(self):
        root_base_class = next(
            (cls for cls in reversed(inspect.getmro(self._servicer_cls)) if cls is not object), None
        )
        root_base_class_module_name = root_base_class.__module__
        grpc_module = importlib.import_module(root_base_class_module_name)
        return grpc_module

    def _get_stub_class(self):
        grpc_module = self._get_grpc_module()
        stub_name = self._get_stub_name()
        stub_cls = getattr(grpc_module, stub_name, None)
        return stub_cls

    def _getMethods(self):
        service_name = self._get_service_name()
        grpc_module = self._get_grpc_module()
        p2b_module_name = grpc_module.__name__[: -len('_grpc')]
        p2b_module = importlib.import_module(p2b_module_name)
        service_descriptor = p2b_module.DESCRIPTOR.services_by_name.get(service_name)
        method_info = []
        for method in service_descriptor.methods:
            http_rule: HttpRule = method.GetOptions().Extensions[annotations_pb2.http]
            url = ""
            if http_rule.get:
                url = http_rule.get
            else:
                url = http_rule.post
            input_cls = get_type(method.input_type.full_name)
            output_cls = get_type(method.output_type.full_name)
            a_method = MethodInfo(method.name, url, input_cls, output_cls)
            method_info.append(a_method)
        return method_info

    def start(self):
        self._process = multiprocessing.Process(
            name="rest proxy process",
            target=self._start_in_process,
            daemon=True
        )

        self._process.start()



    def _start_in_process(self):

        grpc_aio.init_grpc_aio()
        app = web.Application()
        methods = self._getMethods()
        # connect to product server
        grpc_channel = grpc_aio.insecure_channel("localhost:50050")
        aio_stub = self._get_stub_class()(grpc_channel)
        routes = []
        for method in methods:
            stub_method = getattr(aio_stub, method.name)
            # construct a partial handler.
            handler = partial(self._handle_post_unary_unary,
                              aio_stub_method=stub_method, request_type=method.request_cls)
            routes.append(web.post(method.url, handler))
            print(stub_method)
        app.add_routes(routes)
        self._app = app
        web.run_app(app, host="127.0.0.1", port=65000)

    def stop(self):
        self._process.terminate()
        self._process.join()

    async def _handle_post_unary_unary(self, request: web.Request, aio_stub_method, request_type) -> web.Response:
        """
            The method is bound to underlying grpc stub when defining route.
            When a request is made, this method is invoked with the web.Request object.
        """
        try:
            request_json = await request.json()
            request_proto = json_to_proto(request_json, request_type)
            response_proto = await aio_stub_method(request_proto)
            return web.json_response(proto_to_json(response_proto))

        except:
            return web.json_response({'error': "error ocucured"})




def json_to_proto(
    json_obj, proto_clazz, ignore_unknown_fields: bool = True):
    proto_message = proto_clazz()
    json_format.ParseDict(json_obj, proto_message, ignore_unknown_fields=ignore_unknown_fields)
    return proto_message

def proto_to_json(
    proto_message,
    camel_case: bool = False,
    including_default_value_fields: bool = False,
    use_integers_for_enums: bool = False):
    return json_format.MessageToDict(
        proto_message,
        preserving_proto_field_name=not camel_case,
        including_default_value_fields=including_default_value_fields,
        use_integers_for_enums=use_integers_for_enums,
    )


# if __name__=="__main__":
#     proxy = RestProxy(ProductInfoServer)
#     proxy.start()